/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Knapsack;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlo
 */
public class Knapsack_View extends javax.swing.JFrame {

    /**
     * Creates new form Knapsack_View
     */
    ArrayList<JLabel> objetos;
    JFrame father;
    ArrayList<Integer> pesos;
    ArrayList<Integer> valores;

    public Knapsack_View(JFrame father) {
        initComponents();
        this.father = father;
        this.setLocationRelativeTo(null);
        objetos = new ArrayList<>();
        pesos = new ArrayList<>();
        valores = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ObjetosLayer = new javax.swing.JPanel();
        AddObjectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ObjectsTable = new javax.swing.JTable();
        CalculateTime = new javax.swing.JButton();
        SackWeightField = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1017, 557));

        ObjetosLayer.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout ObjetosLayerLayout = new javax.swing.GroupLayout(ObjetosLayer);
        ObjetosLayer.setLayout(ObjetosLayerLayout);
        ObjetosLayerLayout.setHorizontalGroup(
            ObjetosLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 569, Short.MAX_VALUE)
        );
        ObjetosLayerLayout.setVerticalGroup(
            ObjetosLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 437, Short.MAX_VALUE)
        );

        AddObjectButton.setText("Agregar Objeto");
        AddObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddObjectButtonActionPerformed(evt);
            }
        });

        ObjectsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Weight", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ObjectsTable);

        CalculateTime.setText("Calcular Peso Total");
        CalculateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateTimeActionPerformed(evt);
            }
        });

        SackWeightField.setText("Peso máximo de la mochila");
        SackWeightField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SackWeightFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SackWeightFieldFocusLost(evt);
            }
        });
        SackWeightField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SackWeightFieldActionPerformed(evt);
            }
        });

        ExitButton.setText("Salir");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ObjetosLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(AddObjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SackWeightField)
                    .addComponent(ExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(CalculateTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddObjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SackWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(CalculateTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton))
                    .addComponent(ObjetosLayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddObjectButtonActionPerformed
        Random r = new Random();
        DefaultTableModel modelo = (DefaultTableModel) ObjectsTable.getModel();      // TODO add your handling code here:
        modelo.setRowCount(modelo.getRowCount() + 1);
        int peso = r.nextInt(20);
        pesos.add(peso);
        Integer valor = r.nextInt(500);
        valores.add(valor);
        modelo.setValueAt(peso, modelo.getRowCount() - 1, 0);
        modelo.setValueAt(valor, modelo.getRowCount() - 1, 1);

        JLabel labelTemporal = new JLabel();
        labelTemporal.setText("Peso: " + peso + ", Valor: " + valor);
        objetos.add(labelTemporal);
        ObjetosLayer.add(labelTemporal);
        labelTemporal.setSize(300, 100);
        labelTemporal.setBackground(Color.GRAY);
        labelTemporal.setLocation(r.nextInt(ObjetosLayer.getWidth() - labelTemporal.getWidth()),
                r.nextInt(ObjetosLayer.getHeight() - labelTemporal.getHeight()));
        labelTemporal.setForeground(Color.BLACK);
        ObjetosLayer.validate();
    }//GEN-LAST:event_AddObjectButtonActionPerformed

    private void CalculateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateTimeActionPerformed
        int pesoMochila = Integer.parseInt(SackWeightField.getText());
        Integer peso_array[] = new Integer[pesos.size()];
        peso_array = pesos.toArray(peso_array);
        Integer valores_array[] = new Integer[valores.size()];
        valores_array = valores.toArray(valores_array);
        knapSackLight(pesoMochila, peso_array, valores_array);
    }//GEN-LAST:event_CalculateTimeActionPerformed

    private void SackWeightFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SackWeightFieldFocusGained
        if (SackWeightField.getText().equals("Peso máximo de la mochila")) {
            SackWeightField.setText("");
        }
    }//GEN-LAST:event_SackWeightFieldFocusGained

    private void SackWeightFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SackWeightFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SackWeightFieldActionPerformed

    private void SackWeightFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SackWeightFieldFocusLost
        if (SackWeightField.getText().equals("")) {
            SackWeightField.setText("Peso máximo de la mochila");
        }
    }//GEN-LAST:event_SackWeightFieldFocusLost

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        this.dispose();
        father.setVisible(true);
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Knapsack_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Knapsack_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Knapsack_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Knapsack_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Knapsack_View(null).setVisible(true);
            }
        });
    }

    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    int knapSack(int W, Integer wt[], Integer val[], int n) {
        // Base Case 
        if (n == 0 || W == 0) {
            return 0;
        }

        if (wt[n - 1] > W) {
            return knapSack(W, wt, val, n - 1);
        } else {
            return max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1));
        }
    }

    int knapSackBU(int W, Integer wt[], Integer val[], int n) {
        int i, w;
        int K[][] = new int[n + 1][W + 1];

        for (i = 0; i <= n; i++) {
            for (w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    K[i][w] = 0;
                } else if (wt[i - 1] <= w) {
                    K[i][w]
                            = max(val[i - 1]
                                    + K[i - 1][w - wt[i - 1]],
                                    K[i - 1][w]);
                } else {
                    K[i][w] = K[i - 1][w];
                }
            }
        }

        return K[n][W];
    }

    int knapSackHeavy(int W, Integer wt[], Integer val[]) {
        long start = System.nanoTime();
        int heavy[] = new int[val.length];
        int space = W;
        for (int i = 0; i < val.length; i++) {
            if (space < wt[heaviest(wt)]) {
                wt[heaviest(wt)] = 0;
            } else {
                heavy[i] = val[heaviest(wt)];
                space -= wt[heaviest(wt)];
                wt[heaviest(wt)] = 0;
            }
        }
        long time = (System.nanoTime() - start);
        System.out.println("Tiempo transcurrido: " + time + " en nanosegundos");
        return W - space;
    }

    int heaviest(Integer wt[]) {
        int heavy = 0;
        int index = 0;
        for (int i = 0; i < wt.length; i++) {
            if (wt[i] > heavy) {
                heavy = wt[i];
                index = i;
            }
        }
        return index;
    }

    int knapSackLight(int W, Integer wt[], Integer val[]) {
        long start = System.nanoTime();
        int light[] = new int[val.length];
        int space = W;
        for (int i = 0; i < val.length; i++) {
            if (space < wt[lightest(wt)]) {
                wt[lightest(wt)] = 4000;
            } else {
                objetos.get(lightest(wt)).setVisible(false);
                ObjetosLayer.revalidate();
                light[i] = val[lightest(wt)];
                space -= wt[lightest(wt)];
                wt[lightest(wt)] = 4000;
            }
        }
        long time = (System.nanoTime() - start);
        System.out.println("Tiempo transcurrido: " + time + " en nanosegundos");
        return W - space;
    }

    int lightest(Integer wt[]) {
        int light = 3000;
        int index = 0;
        for (int i = 0; i < wt.length; i++) {
            if (wt[i] < light) {
                light = wt[i];
                index = i;
            }
        }
        return index;
    }

    public void llenarArreglo(int[] arreglo) {
        Random rand = new Random();
        for (int i = 0; i < arreglo.length; i++) {
            // Generar un número aleatorio entre 0 y 100 (puedes ajustar el rango según tus necesidades)
            arreglo[i] = rand.nextInt(500); // Genera números entre 0 y 100
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddObjectButton;
    private javax.swing.JButton CalculateTime;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTable ObjectsTable;
    private javax.swing.JPanel ObjetosLayer;
    private javax.swing.JTextField SackWeightField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
